package com.jasonko.movietime.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jasonko.movietime.dao.FavoriteMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FAVORITE_MESSAGE.
*/
public class FavoriteMessageDao extends AbstractDao<FavoriteMessage, Long> {

    public static final String TABLENAME = "FAVORITE_MESSAGE";

    /**
     * Properties of entity FavoriteMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message_id = new Property(1, int.class, "message_id", false, "MESSAGE_ID");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Pub_date = new Property(6, String.class, "pub_date", false, "PUB_DATE");
        public final static Property View_count = new Property(7, int.class, "view_count", false, "VIEW_COUNT");
        public final static Property Like_count = new Property(8, int.class, "like_count", false, "LIKE_COUNT");
        public final static Property Reply_size = new Property(9, int.class, "reply_size", false, "REPLY_SIZE");
        public final static Property Head_index = new Property(10, int.class, "head_index", false, "HEAD_INDEX");
        public final static Property Is_head = new Property(11, boolean.class, "is_head", false, "IS_HEAD");
        public final static Property Link_url = new Property(12, String.class, "link_url", false, "LINK_URL");
    };


    public FavoriteMessageDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FAVORITE_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE_ID' INTEGER NOT NULL ," + // 1: message_id
                "'AUTHOR' TEXT NOT NULL ," + // 2: author
                "'TITLE' TEXT NOT NULL ," + // 3: title
                "'TAG' TEXT NOT NULL ," + // 4: tag
                "'CONTENT' TEXT NOT NULL ," + // 5: content
                "'PUB_DATE' TEXT NOT NULL ," + // 6: pub_date
                "'VIEW_COUNT' INTEGER NOT NULL ," + // 7: view_count
                "'LIKE_COUNT' INTEGER NOT NULL ," + // 8: like_count
                "'REPLY_SIZE' INTEGER NOT NULL ," + // 9: reply_size
                "'HEAD_INDEX' INTEGER NOT NULL ," + // 10: head_index
                "'IS_HEAD' INTEGER NOT NULL ," + // 11: is_head
                "'LINK_URL' TEXT NOT NULL );"); // 12: link_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAVORITE_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavoriteMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessage_id());
        stmt.bindString(3, entity.getAuthor());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getTag());
        stmt.bindString(6, entity.getContent());
        stmt.bindString(7, entity.getPub_date());
        stmt.bindLong(8, entity.getView_count());
        stmt.bindLong(9, entity.getLike_count());
        stmt.bindLong(10, entity.getReply_size());
        stmt.bindLong(11, entity.getHead_index());
        stmt.bindLong(12, entity.getIs_head() ? 1l: 0l);
        stmt.bindString(13, entity.getLink_url());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavoriteMessage readEntity(Cursor cursor, int offset) {
        FavoriteMessage entity = new FavoriteMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // message_id
            cursor.getString(offset + 2), // author
            cursor.getString(offset + 3), // title
            cursor.getString(offset + 4), // tag
            cursor.getString(offset + 5), // content
            cursor.getString(offset + 6), // pub_date
            cursor.getInt(offset + 7), // view_count
            cursor.getInt(offset + 8), // like_count
            cursor.getInt(offset + 9), // reply_size
            cursor.getInt(offset + 10), // head_index
            cursor.getShort(offset + 11) != 0, // is_head
            cursor.getString(offset + 12) // link_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavoriteMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_id(cursor.getInt(offset + 1));
        entity.setAuthor(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setTag(cursor.getString(offset + 4));
        entity.setContent(cursor.getString(offset + 5));
        entity.setPub_date(cursor.getString(offset + 6));
        entity.setView_count(cursor.getInt(offset + 7));
        entity.setLike_count(cursor.getInt(offset + 8));
        entity.setReply_size(cursor.getInt(offset + 9));
        entity.setHead_index(cursor.getInt(offset + 10));
        entity.setIs_head(cursor.getShort(offset + 11) != 0);
        entity.setLink_url(cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FavoriteMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavoriteMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
