package com.jasonko.movietime.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jasonko.movietime.dao.RecentMovie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECENT_MOVIE.
*/
public class RecentMovieDao extends AbstractDao<RecentMovie, Long> {

    public static final String TABLENAME = "RECENT_MOVIE";

    /**
     * Properties of entity RecentMovie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Movie_class = new Property(2, String.class, "movie_class", false, "MOVIE_CLASS");
        public final static Property Movie_type = new Property(3, String.class, "movie_type", false, "MOVIE_TYPE");
        public final static Property Actors = new Property(4, String.class, "actors", false, "ACTORS");
        public final static Property Publish_date = new Property(5, String.class, "publish_date", false, "PUBLISH_DATE");
        public final static Property Small_pic = new Property(6, String.class, "small_pic", false, "SMALL_PIC");
        public final static Property Movie_id = new Property(7, int.class, "movie_id", false, "MOVIE_ID");
        public final static Property Update_date = new Property(8, java.util.Date.class, "update_date", false, "UPDATE_DATE");
    };


    public RecentMovieDao(DaoConfig config) {
        super(config);
    }
    
    public RecentMovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECENT_MOVIE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'MOVIE_CLASS' TEXT NOT NULL ," + // 2: movie_class
                "'MOVIE_TYPE' TEXT NOT NULL ," + // 3: movie_type
                "'ACTORS' TEXT NOT NULL ," + // 4: actors
                "'PUBLISH_DATE' TEXT NOT NULL ," + // 5: publish_date
                "'SMALL_PIC' TEXT NOT NULL ," + // 6: small_pic
                "'MOVIE_ID' INTEGER NOT NULL ," + // 7: movie_id
                "'UPDATE_DATE' INTEGER NOT NULL );"); // 8: update_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECENT_MOVIE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecentMovie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getMovie_class());
        stmt.bindString(4, entity.getMovie_type());
        stmt.bindString(5, entity.getActors());
        stmt.bindString(6, entity.getPublish_date());
        stmt.bindString(7, entity.getSmall_pic());
        stmt.bindLong(8, entity.getMovie_id());
        stmt.bindLong(9, entity.getUpdate_date().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecentMovie readEntity(Cursor cursor, int offset) {
        RecentMovie entity = new RecentMovie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // movie_class
            cursor.getString(offset + 3), // movie_type
            cursor.getString(offset + 4), // actors
            cursor.getString(offset + 5), // publish_date
            cursor.getString(offset + 6), // small_pic
            cursor.getInt(offset + 7), // movie_id
            new java.util.Date(cursor.getLong(offset + 8)) // update_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecentMovie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setMovie_class(cursor.getString(offset + 2));
        entity.setMovie_type(cursor.getString(offset + 3));
        entity.setActors(cursor.getString(offset + 4));
        entity.setPublish_date(cursor.getString(offset + 5));
        entity.setSmall_pic(cursor.getString(offset + 6));
        entity.setMovie_id(cursor.getInt(offset + 7));
        entity.setUpdate_date(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecentMovie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecentMovie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
